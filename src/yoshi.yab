#!yab

doc Yoshi
doc yab over shell for input
doc
doc copyright Jim Saxton Fat Elk Software, 2016, BSD ( 2 dalause)



if peek("argument") = 0 usage ()
if peek("argument") > 1 usage ()
command$=peek$("argument")
if (not open(1,command$)) then
	if (not open(1,"/boot/home/config/settings/fatelk/yoshi/commands/"+command$)) error "Could not open "+command$+" for reading" 
end if

dim widget$(150,3)
dim active_widget$(1,20)	
defaults()
origxorigx=0 // origon for next widget
origy=0 // origon for next widget
x=0
while(not eof(1)) 
	line input #1 a$
	if len(a$)>0 then
	if (not left$(a$,1) = "#") then
	if parseline$(a$)="ok" then
	widget$(x,1)=label$
	widget$(x,2)=command$
	widget$(x,3)=parameter$
	x=x+1
	endif
	endif
	endif
	 
	
wend 

for x=0 to 150
if widget$(x,1) <> "" then
//print widget$(x,1)+" "+widget$(x,2)+" "+widget$(x,3)
if lower$(widget$(x,2)) = "type" widget_type(x)
endif
next
openwindow(0)

inloop=1
while(inloop)
	msg$=message$
	//if msg$<>"" print msg$
	
	
	switch msg$
		
		case ID$+":_QuitRequested|"
		case "cancel|"
		print "cancel=1"
		inloop=0
        	
        	break
        	
        case "default|"
        
        completed=handleoutput()
        
        if (completed) print "cancel=0":print "default=1":inloop=0
        break
     
      default
      if instr(msg$,"ON|") ceckboxonoff(msg$)
      if instr(msg$,"OFF|") ceckboxonoff(msg$)	
	end switch
wend
exit
////////////////////////////////////////////////////////
sub handleoutput()
size=arraysize( active_widget$(),1)
for x=1 to size
if active_widget$(x,20) = "true" then 
if (active_widget$(x,1)="TEXTCONTROL") and (TEXTCONTROL GET$ active_widget$(x,2) = "") return 0

// the widget is manditory, need to check if it has data.
end if
next


for x=1 to size

	if active_widget$(x,1)="TEXTCONTROL" then
		output$ = active_widget$(x,2)+"="+TEXTCONTROL GET$ active_widget$(x,2)
		//output$=output$
		print output$		
	endif
	if active_widget$(x,1)="checkbox" then
		output$=active_widget$(x,2)+"="+active_widget$(x,5)
		print output$
	endif
	
next

return 1
end sub

////////////////////////////////////////////////////////
sub usage()
print "yoshi 1.0"
print "usage:"
print "yoshi commandfile"
print
print " The commandfile must have all the window elements,"
print "please see the documentation for details."
exit
end sub
////////////////////////////////////////////////////////
sub parseline$(line$)
//print line$
local x,y
x=instr(line$,"=")
if x=0 return "error"
lc$=left$(line$,x-2) // label and command
y=instr(lc$,".")
if y<1 return "error"
label$=left$(lc$,y-1)
command$=right$(lc$,len(lc$)-y)
parameter$ = right$(line$,len(line$)-(x+1))
parameter$=trim$(parameter$)
return "ok"

end sub
////////////////////////////////////////////////////////
sub Blank$(num) 
local s$
local x
s$=""
for x=1 to num
	s$=s$+"â–ˆ"
next
return s$ 
end sub
////////////////////////////////////////////////////////
sub windowlook$(winlook$)
switch lower$(winlook$)
	case "floating"
		return "Floating"
		break
	case "modal"
		cancel=1
		return "Modal"
		break
	case "bordered"
		cancel=1
		return "Bordered"
		break
	case "no-border"
		cancel=1
		return "No-Border"
		break
	default
		return "Titled"
		break
end switch
end sub
////////////////////////////////////////////////////////
sub defaults()
height=peek("desktopheight")
width=peek("desktopwidth")
width=width/2
wx=width-140
wx1=width+140
height=height/4
wy=height-40
wy1=height
ID$="MainWindow"
Title$="Yoshi"
curentheight = 40
curentwidth=280
ox=wx
oy=wy
end sub

////////////////////////////////////////////////////////
sub openwindow(p)
local x
x=p
r=216
b=216
g=216
dim bgcolor$(3)
label getcommand
if widget$(x,1) = "*" then

	command$=upper$(widget$(x,2))
	parameter$ = widget$(x,3)
		switch command$
		case "TITLE"
			Title$ = parameter$
		break
		case "LOOK"
			look$ = parameter$
		break
		case "X" 
			ox=val(parameter$)
		break
		case "Y"
			oy=val(parameter$)
		break
		case "BGCOLOR"
		num=split(parameter$,bgcolor$(), ",")
		break
		default
		end switch				
x=x+1

endif
if widget$(x,1) = "*"goto getcommand
if curentwidth>280 wx1=wx+curentwidth
WINDOW OPEN wx,wy TO wx1,wy+curentheight, ID$, Title$
WINDOW SET ID$, "flags", "Not-Resizable Not-Zoomable"
if bgcolor$(1)<>""then
r=val(bgcolor$(1))
g=val(bgcolor$(2))
b=val(bgcolor$(3))
end if
DRAW SET "bgcolor", r,g,b, ID$
if look$<>"" then
llook$=windowlook$(look$)
//print llook$
WINDOW SET ID$, "look",llook$
endif


 
WINDOW SET ID$, "MoveTo", ox,oy
BUTTON curentwidth-45,curentheight-25 TO curentwidth-5,curentheight-5, "default", "OK", ID$
if cancel=1 then
BUTTON curentwidth-115,curentheight-25 TO curentwidth-50,curentheight-5, "cancel", "CANCEL", ID$
endif
draw set "system-fixed",ID$
size=arraysize( active_widget$(),1)
for x=1 to size
addwidget(x)

next





end sub
////////////////////////////////////////////////////////
sub widget_type(n)

switch lower$(widget$(n,3))
	case "textfield"
		textfield(n)
		break
	case "image"
		imagefile(n)
		break
	case "checkbox"
		checkboxsetup(n)
		break
	case "text"
		textsetup(n)
	break	
	default
	end switch	


end sub

////////////////////////////////////////////////////////
sub textfield(x)
arayscript=x

size=arraysize( active_widget$(),1)
size=size+1
label$=""
dim active_widget$(size,8)
fontheight=peek("tabheight")
curentheight=curentheight+30
active_widget$(size,1)="TEXTCONTROL"
active_widget$(size,2)=widget$(arayscript,1) // name of textcontrol
arayscript=arayscript+1
label texttest
if widget$(arayscript,1)=active_widget$(size,2) then
//print "lower$(widget$(arayscript,2)) ",lower$(widget$(arayscript,2))
	switch lower$(widget$(arayscript,2))
		case "label"
			//print "label ", widget$(arayscript,3)
			label$ = widget$(arayscript,3)
			curentheight = curentheight+fontheight
		break
		case "default"
			defaulttext$ = widget$(arayscript,3)
			break
		case "width"	
			textlength$=widget$(arayscript,3)
		break
		case "tooltip"
			tooltip$=widget$(arayscript,3)
		break
		case "single"
		single$=lower$(widget$(arayscript,3))
		break
		case "mandatory"
		mandatory$=lower$(widget$(arayscript,3))
		break
		case "align"
		align$=lower$(widget$(arayscript,3))
		default
	end switch
end if
arayscript=arayscript+1
if widget$(arayscript,1)=active_widget$(size,2) goto texttest
//TEXT x1,y1 TO x2,y2, ID$, Text$, View$
//TEXTCONTROL x1,y1 TO x2,y2, ID$, Label$, Text$, View$

active_widget$(size,3)=label$
//print "active_widget$(size,3) "+active_widget$(size,3), size
active_widget$(size,4)=defaulttext$
active_widget$(size,5)=textlength$
active_widget$(size,6)=tooltip$
active_widget$(size,7)=single$
active_widget$(size,19)=align$
active_widget$(size,20)=mandatory$
if single$="true" then
	window open -300 ,-300 to -100, -100, "bmp", ""
	space$=Blank$(val(textlength$))
	TC_Width=draw get "Text-Width", space$,"bmp"
	labelength=draw get "Text-Width", label$, "bmp"
	labelength=labelength+TC_Width
	if (labelength > curentwidth-10) curentwidth=labelength+10
	Window close "bmp"
	if active_widget$(size,3)<>"" curentheight = curentheight-fontheight
endif





//print "curentheight ", curentheight

label$=""
defaulttext$=""
textlength$=""
tooltip$=""
single$=""			
mandatory$="" 
align$=""

end sub

////////////////////////////////////////////////////////
sub imagefile(n)

arayscript=n
size=arraysize( active_widget$(),1)
size=size+1
label$=""
dim active_widget$(size,20)
//print widget$(n,3)
active_widget$(size,1)="image"
active_widget$(size,2)=widget$(arayscript,1) // name of image
arayscript=arayscript+1

label imagetest
if widget$(arayscript,1)=active_widget$(size,2) then
//print "lower$(widget$(arayscript,2)) ",lower$(widget$(arayscript,2))
	switch lower$(widget$(arayscript,2))
		case "label"
			//print "label ", widget$(arayscript,3)
			label$ = widget$(arayscript,3)
			curentheight = curentheight+25
			break
		case "path"
			imagepath$ = widget$(arayscript,3)
			break
		case "maxwidth"	
			imagewidth$=widget$(arayscript,3)
		break
		case "maxheight"	
			imageheight$=widget$(arayscript,3)
		break
		case "border"
			imageborder$=widget$(arayscript,3)
		default
	end switch
end if
arayscript=arayscript+1
if widget$(arayscript,1)=active_widget$(size,2) goto imagetest
active_widget$(size,3)=label$
active_widget$(size,4)=imagepath$
active_widget$(size,5)=imagewidth$
active_widget$(size,7)=imageborder$

if imageheight$="" then
//print lower$(widget$(arayscript,2)) +" "+active_widget$(size,2)
	imageheight$=attribute get$ "Media:Height", imagepath$
	imageheight$=str$(asc(imageheight$))
endif
if val(imageheight$)=0 imageheight$="64"
active_widget$(size,6)=imageheight$
curentheight = curentheight+val(imageheight$)+10 

label$=""
imagepath$=""
imagewidth$=""
imageborder$=""
imageheight$=""
end sub
////////////////////////////////////////////////////////
sub checkboxsetup(n)
local x
x=n
size=arraysize( active_widget$(),1)
size=size+1
label$=""
dim active_widget$(size,20)
active_widget$(size,1)="checkbox"
active_widget$(size,2)=widget$(x,1) // name of checkbox
curentheight = curentheight+25

label checkboxtest
if widget$(x,1)=active_widget$(size,2) then
//print "lower$(widget$(x,2)) ",lower$(widget$(x,2))
	switch lower$(widget$(x,2))
		case "label"
			//print "label ", widget$(x,3)
			label$ = widget$(x,3)
			
			break
		case "default"
			default$ = widget$(x,3)
			break
		case "tooltip"	
			tooltip$=widget$(x,3)
		break
		
		default
	end switch
end if

x=x+1
if widget$(x,1)=active_widget$(size,2) goto checkboxtest
window open -300 ,-300 to -100, -100, "bmp", ""
	labelength=draw get "Text-Width", label$, "bmp"
	if (labelength > curentwidth-40) curentwidth=labelength+40
Window close "bmp"
active_widget$(size,3)=label$
active_widget$(size,4)=default$
active_widget$(size,6)=tooltip$

label$=""
default$=""
tooltip$ = ""	
	

end sub
////////////////////////////////////////////////////////

sub textsetup(n)

local x, lines
lines=3
x=n
size=arraysize( active_widget$(),1)
size=size+1
dim active_widget$(size,20)
active_widget$(size,1)="text"
active_widget$(size,2)=widget$(x,1) // name of text
label texttest
if widget$(x,1)=active_widget$(size,2) then
//print "lower$(widget$(x,2)) ",lower$(widget$(x,2))
	switch lower$(widget$(x,2))
		
			
			
		case "default"
			default$ = widget$(x,3)
			break
		case "tooltip"	
			tooltip$=widget$(x,3)
		break
		case "lines"
			lines$=widget$(x,3)
		case "align"
			align$=widget$(x,3)
		case "scrollbar"
			scrollbar$=widget$(x,3)
			break
		case "bg"
			bg$=widget$(x,3)
			break
				
		default
	end switch
end if

x=x+1
if widget$(x,1)=active_widget$(size,2) goto texttest

if default$="" return


label checkdefault

i=instr(default$,"[return]")
if i > 0 then
lt$=left$(default$,i-1)
rt$=right$(default$,len(default$)-(i+7))
default$=lt$+"\n"+rt$
goto checkdefault
endif


if lines$="" lines$="3" 

active_widget$(size,3)=lines$
active_widget$(size,4)=default$
active_widget$(size,6)=tooltip$
active_widget$(size,19)=align$
active_widget$(size,18)=scrollbar$
active_widget$(size,17)=bg$



lines=val(lines$)

curentheight = curentheight+(20*lines)

lines$=""
default$=""
tooltip$=""
align$=""
scrollbar$=""
bg$=""
end sub


////////////////////////////////////////////////////////
sub addwidget(n)
c=n
switch active_widget$(c,1)
	case "TEXTCONTROL"
		buildtextcontrol(c)
	break
	case "image"
		addimage(c)
	break
	case "checkbox"
		addcheckbox(c)
	break
	case "text"
		addtext(c)
	break	
	default
end switch	
end sub	

////////////////////////////////////////////////////////
sub buildtextcontrol(ze)
local x
x=ze
if active_widget$(x,5)="" active_widget$(x,5)="35"
if active_widget$(x,3)<>"" then
if active_widget$(x,7) <> "true" then
//print "active_widget$(x,3) "+active_widget$(x,3)+" ", x
	text origx+5,origy+5 to curentwidth-5, origy+25, str$(x), active_widget$(x,3),ID$
	TEXT SET str$(x), "Align-Center"
	origy= origy+25
endif	
endif	
	
	space$=Blank$(val(active_widget$(x,5))+3)
	TC_Width=draw get "Text-Width", space$,ID$
	if active_widget$(x,7)="true"then
	label$=active_widget$(x,3)
	TC_Width=TC_Width+draw get "Text-Width", label$,ID$
	endif
	
	if TC_Width < curentwidth then
		TC_Width=TC_Width/2
		st=(curentwidth/2)-TC_Width
		en=(curentwidth/2)+TC_Width
		if (active_widget$(x,19)="left") and (active_widget$(x,7)="true") then
			st=origx+5
			en=st+(TC_Width*2)
		endif
		if (active_widget$(x,19)="right") and (active_widget$(x,7)="true") then
			en=curentwidth-5
			st=en-(TC_Width*2)
		endif
		else
		st=origx+5
		en=origx+(curentwidth-10)
	endif
	
	
	

if active_widget$(x,7)="true"then
label$=active_widget$(x,3)
curentheight = curentheight-fontheight
//en=en+draw get "Text-Width", label$,ID$
//if (en > curentwidth-10) en=curentwidth-10
//st=origx+8
endif



 
TEXTCONTROL st,origy+5 to en, origy+25, active_widget$(x,2), label$,active_widget$(x,4),ID$

// for nmanditory fields
if active_widget$(x,20) = "true" then
DRAW SET "HighColor", 255,0,0, ID$
if active_widget$(x,7)="true"then
DRAW CIRCLE st-4,origy+15, 2, ID$
else
DRAW CIRCLE origx+3,origy+15, 2, ID$
endif
DRAW SET "HighColor", 0,0,0, ID$
endif

 
//print st, en , origy+30, origy+50
label$=""
TEXTCONTROL set active_widget$(x,2), "length",active_widget$(x,5)
if (active_widget$(x,6) <>"" ) tooltip active_widget$(x,2), active_widget$(x,6) 



 

//print "building"
origy=origy+30
x=0
end sub


////////////////////////////////////////////////////////
sub addimage(n)
local x, www,width
x=n

if active_widget$(x,3)<>"" then
//print "active_widget$(x,3) "+active_widget$(x,3)+" ", x
	text origx+5,origy+5 to curentwidth-5, origy+25, str$(x), active_widget$(x,3),ID$
	TEXT SET str$(x), "Align-Center"
	origy= origy+25
endif
width=0
if val(active_widget$(x,5))=0 then
xw = -1
//print wx
else 
width=val(active_widget$(x,5))
xw=origx+5+width
endif
//print width
www=window get ID$, "Width"
www=www/2
if (width > 0) then
www = www-(width/2)
xw=www+width
else 
www = origx+5
endif
//print www,xw, width, active_widget$(x,5)
border=0
if (active_widget$(x,7)<>"") then
border=val(active_widget$(x,7))
draw set "highcolor", 150,150,150 , ID$
draw set true, "HighSolidFill"
DRAW RECT www-border,(origy+5)-border TO xw+border,origy+5+val(active_widget$(x,6))+border, ID$
draw set false, "HighSolidFill"
draw set "highcolor", 0,0,0 , ID$
end if


LoadError = DRAW IMAGE www,origy+5 TO xw,origy+5+val(active_widget$(x,6)), active_widget$(x,4), ID$
//print LoadError


origy=origy+val(active_widget$(x,6))+5+border

end sub	

////////////////////////////////////////////////////////'

sub addcheckbox(b)

 if (val(active_widget$(b,4))=1) then
 active_widget$(b,5)="ON"
 else
 active_widget$(b,5)="OFF"
 endif
CHECKBOX 10,origy+5, active_widget$(b,2), active_widget$(b,3), val(active_widget$(b,4)), ID$
if active_widget$(b,6)<>"" then
tooltip active_widget$(b,2), active_widget$(b,6)
endif

origy=origy+25

end sub
////////////////////////////////////////////////////////

sub addtext(bb)

sbar = val(active_widget$(bb,18))
if sbar > 3 sbar=0
if sbar < 0 sbar=0


textedit origx+5, origy to curentwidth-5, origy+(val(active_widget$(bb,3))*20), active_widget$(bb,2), sbar, ID$
textedit add active_widget$(bb,2), active_widget$(bb,4)
if active_widget$(bb,17) <> "white" TEXTEDIT COLOR active_widget$(bb,2), "bgcolor",r,g,b
TEXTEDIT SET active_widget$(bb,2), "editable", false
//textedit add active_widget$(bb,2), active_widget$(bb,4)
if (active_widget$(bb,6)<>"") tooltip active_widget$(bb,2), active_widget$(bb,6)
if (active_widget$(bb,19)<>"") TEXTEDIT SET active_widget$(bb,2),"align", active_widget$(bb,19)

origy=origy+(val(active_widget$(bb,3))*20)+15
end sub


////////////////////////////////////////////////////////

sub ceckboxonoff(statu$)
if right$(statu$,5)=":OFF|" on$ = "OFF":widget$=left$(statu$, len(statu$)-5)
if right$(statu$,4)=":ON|"  on$ = "ON":widget$=left$(statu$, len(statu$)-4)

size=arraysize( active_widget$(),1)
for x=1 to size
if (active_widget$(x,2) = widget$) active_widget$(x,5)=on$
next

end sub
////////////////////////////////////////////////////////
